{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { isAvailableAsync, AppleAuthenticationScope, signInAsync } from 'expo-apple-authentication';\nimport { digestStringAsync, CryptoDigestAlgorithm } from 'expo-crypto';\nimport { OAuthProvider } from 'firebase/auth';\nimport { useState, useEffect } from 'react';\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\n\nfunction login() {\n  var state, rawNonce, requestedScopes, nonce, appleCredential, identityToken, email, fullName, provider, credential, displayName, data;\n  return _regeneratorRuntime.async(function login$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          console.log('Signing in with Apple...');\n          state = Math.random().toString(36).substring(2, 15);\n          rawNonce = Math.random().toString(36).substring(2, 10);\n          requestedScopes = [AppleAuthenticationScope.FULL_NAME, AppleAuthenticationScope.EMAIL];\n          _context.prev = 4;\n          _context.next = 7;\n          return _regeneratorRuntime.awrap(digestStringAsync(CryptoDigestAlgorithm.SHA256, rawNonce));\n\n        case 7:\n          nonce = _context.sent;\n          _context.next = 10;\n          return _regeneratorRuntime.awrap(signInAsync({\n            requestedScopes: requestedScopes,\n            state: state,\n            nonce: nonce\n          }));\n\n        case 10:\n          appleCredential = _context.sent;\n          identityToken = appleCredential.identityToken, email = appleCredential.email, fullName = appleCredential.fullName;\n\n          if (identityToken) {\n            _context.next = 14;\n            break;\n          }\n\n          throw new Error('No identity token provided.');\n\n        case 14:\n          provider = new OAuthProvider('apple.com');\n          provider.addScope('email');\n          provider.addScope('fullName');\n          credential = provider.credential({\n            idToken: identityToken,\n            rawNonce: rawNonce\n          });\n          displayName = fullName ? fullName.givenName + \" \" + fullName.familyName : undefined;\n          data = {\n            email: email,\n            displayName: displayName\n          };\n          return _context.abrupt(\"return\", [credential, data]);\n\n        case 23:\n          _context.prev = 23;\n          _context.t0 = _context[\"catch\"](4);\n          throw _context.t0;\n\n        case 26:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[4, 23]], Promise);\n}\n\nexport default function useAppleAuthentication() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      authenticationLoaded = _useState2[0],\n      setAuthenticationLoaded = _useState2[1];\n\n  useEffect(function () {\n    function checkAvailability() {\n      var available;\n      return _regeneratorRuntime.async(function checkAvailability$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return _regeneratorRuntime.awrap(isAvailableAsync());\n\n            case 3:\n              available = _context2.sent;\n              setAuthenticationLoaded(available);\n              _context2.next = 10;\n              break;\n\n            case 7:\n              _context2.prev = 7;\n              _context2.t0 = _context2[\"catch\"](0);\n              Alert.alert('Error', _context2.t0 == null ? void 0 : _context2.t0.message);\n\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, [[0, 7]], Promise);\n    }\n\n    if (Platform.OS === 'ios' && !authenticationLoaded) {\n      checkAvailability();\n    }\n  }, []);\n  return [authenticationLoaded, login];\n}","map":{"version":3,"sources":["/home/isaiah/dev/sms/services/client/hooks/auth/useAppleAuthentication.ts"],"names":["isAvailableAsync","AppleAuthenticationScope","signInAsync","digestStringAsync","CryptoDigestAlgorithm","OAuthProvider","useState","useEffect","login","console","log","state","Math","random","toString","substring","rawNonce","requestedScopes","FULL_NAME","EMAIL","SHA256","nonce","appleCredential","identityToken","email","fullName","Error","provider","addScope","credential","idToken","displayName","givenName","familyName","undefined","data","useAppleAuthentication","authenticationLoaded","setAuthenticationLoaded","checkAvailability","available","Alert","alert","message","Platform","OS"],"mappings":"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","sourcesContent":["import { isAvailableAsync, AppleAuthenticationScope, signInAsync } from 'expo-apple-authentication';\n\nimport { digestStringAsync, CryptoDigestAlgorithm } from 'expo-crypto';\n\nimport { OAuthProvider } from 'firebase/auth';\nimport { useState, useEffect } from 'react';\nimport { Alert, Platform } from 'react-native';\n\nasync function login() {\n  console.log('Signing in with Apple...');\n  const state = Math.random().toString(36).substring(2, 15);\n  const rawNonce = Math.random().toString(36).substring(2, 10);\n  const requestedScopes = [AppleAuthenticationScope.FULL_NAME, AppleAuthenticationScope.EMAIL];\n\n  try {\n    const nonce = await digestStringAsync(CryptoDigestAlgorithm.SHA256, rawNonce);\n\n    const appleCredential = await signInAsync({\n      requestedScopes,\n      state,\n      nonce,\n    });\n\n    const { identityToken, email, fullName } = appleCredential;\n\n    if (!identityToken) {\n      throw new Error('No identity token provided.');\n    }\n\n    const provider = new OAuthProvider('apple.com');\n\n    provider.addScope('email');\n    provider.addScope('fullName');\n\n    const credential = provider.credential({\n      idToken: identityToken,\n      rawNonce,\n    });\n\n    const displayName = fullName ? `${fullName.givenName} ${fullName.familyName}` : undefined;\n    const data = { email, displayName };\n\n    return [credential, data] as const;\n  } catch (error: any) {\n    throw error;\n  }\n}\n\nexport default function useAppleAuthentication() {\n  const [authenticationLoaded, setAuthenticationLoaded] = useState<boolean>(false);\n\n  useEffect(() => {\n    async function checkAvailability() {\n      try {\n        const available = await isAvailableAsync();\n\n        setAuthenticationLoaded(available);\n      } catch (error: any) {\n        Alert.alert('Error', error?.message);\n      }\n    }\n\n    if (Platform.OS === 'ios' && !authenticationLoaded) {\n      checkAvailability();\n    }\n  }, []);\n\n  return [authenticationLoaded, login] as const\n}"]},"metadata":{},"sourceType":"module"}
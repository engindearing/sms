{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from \"react\";\nimport { Button } from \"native-base\";\nimport { useNavigation } from \"@react-navigation/native\";\nimport { Container, FormInputs } from \"./LoginScreen.styles\";\nimport { useFormik } from \"formik\";\nimport { auth } from \"../../firebase\";\nimport LoginSchema from \"./LoginFormSchema\";\nimport TextInput from \"../../components/TextInput\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar LoginScreen = function LoginScreen() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var navigation = useNavigation();\n\n  var _useFormik = useFormik({\n    initialValues: {\n      email: \"\",\n      password: \"\",\n      onSubmit: \"\"\n    },\n    validationSchema: LoginSchema,\n    onSubmit: function onSubmit(_ref) {\n      var email, password;\n      return _regeneratorRuntime.async(function onSubmit$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              email = _ref.email, password = _ref.password;\n              setLoading(true);\n              _context.prev = 2;\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(auth.signInWithEmailAndPassword(email, password));\n\n            case 5:\n              _context.next = 9;\n              break;\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](2);\n\n            case 9:\n              _context.prev = 9;\n              setLoading(false);\n              return _context.finish(9);\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[2, 7, 9, 12]], Promise);\n    }\n  }),\n      handleChange = _useFormik.handleChange,\n      handleSubmit = _useFormik.handleSubmit,\n      values = _useFormik.values,\n      handleBlur = _useFormik.handleBlur,\n      errors = _useFormik.errors,\n      setErrors = _useFormik.setErrors,\n      touched = _useFormik.touched;\n\n  return _jsx(Container, {\n    behavior: \"padding\",\n    children: _jsxs(FormInputs, {\n      children: [_jsx(TextInput, {\n        placeholder: \"Email\",\n        icon: \"email\",\n        onChangeText: handleChange(\"email\"),\n        onBlur: handleBlur(\"email\"),\n        error: errors.email,\n        touched: touched.email\n      }), _jsx(TextInput, {\n        placeholder: \"Enter Password\",\n        icon: \"lock\",\n        type: \"password\",\n        onChangeText: handleChange(\"password\"),\n        onBlur: handleBlur(\"password\"),\n        error: errors.password,\n        touched: touched.password\n      }), _jsx(Button, {\n        isLoading: loading,\n        isLoadingText: \"Logging in..\",\n        style: {\n          marginTop: \"3%\"\n        },\n        onPress: function onPress() {\n          return handleSubmit();\n        },\n        children: \"Sign in\"\n      }), _jsx(Button, {\n        style: {\n          marginTop: \"3%\"\n        },\n        variant: \"outline\",\n        onPress: function onPress() {\n          return navigation.navigate(\"Register\");\n        },\n        children: \"Register\"\n      })]\n    })\n  });\n};\n\nexport default LoginScreen;","map":{"version":3,"sources":["/home/isaiah/dev/sms/services/client/screens/LoginScreen/LoginScreen.tsx"],"names":["React","useState","Button","useNavigation","Container","FormInputs","useFormik","auth","LoginSchema","TextInput","LoginScreen","loading","setLoading","navigation","initialValues","email","password","onSubmit","validationSchema","signInWithEmailAndPassword","handleChange","handleSubmit","values","handleBlur","errors","setErrors","touched","marginTop","navigate"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nimport { Button } from \"native-base\";\n\nimport { useNavigation } from \"@react-navigation/native\";\n\nimport { Container, FormInputs } from \"./LoginScreen.styles\";\n\nimport { useFormik } from \"formik\";\n\nimport { auth } from \"../../firebase\";\n\nimport { Alert } from \"native-base\";\n\nimport { Progress } from \"native-base\";\n\nimport LoginSchema from \"./LoginFormSchema\";\nimport TextInput from \"../../components/TextInput\";\n\nconst LoginScreen = () => {\n  const [loading, setLoading] = useState(false);\n\n  const navigation = useNavigation();\n\n  const {\n    handleChange,\n    handleSubmit,\n    values,\n    handleBlur,\n    errors,\n    setErrors,\n    touched,\n  } = useFormik({\n    initialValues: { email: \"\", password: \"\", onSubmit: \"\" },\n    validationSchema: LoginSchema,\n\n    onSubmit: async ({ email, password }) => {\n      setLoading(true);\n      try {\n        await auth.signInWithEmailAndPassword(email, password);\n        \n      } catch (error) {\n        // #TODO\n        // Handle specific error, use a popup instead of alert\n        // alert('Invalid username or password')\n      } finally {\n        setLoading(false);\n      }\n    },\n  });\n\n  return (\n    <Container behavior=\"padding\">\n      <FormInputs>\n        <TextInput\n          placeholder=\"Email\"\n          icon=\"email\"\n          onChangeText={handleChange(\"email\")}\n          onBlur={handleBlur(\"email\")}\n          error={errors.email}\n          touched={touched.email}\n        />\n\n        <TextInput\n          placeholder=\"Enter Password\"\n          icon=\"lock\"\n          type=\"password\"\n          onChangeText={handleChange(\"password\")}\n          onBlur={handleBlur(\"password\")}\n          error={errors.password}\n          touched={touched.password}\n        />\n\n        <Button\n          isLoading={loading}\n          isLoadingText={\"Logging in..\"}\n          style={{ marginTop: \"3%\" }}\n          onPress={() => handleSubmit()}\n        >\n          Sign in\n        </Button>\n        <Button\n          style={{ marginTop: \"3%\" }}\n          variant={\"outline\"}\n          onPress={() => navigation.navigate(\"Register\")}\n        >\n          Register\n        </Button>\n      </FormInputs>\n    </Container>\n  );\n};\n\nexport default LoginScreen;\n"]},"metadata":{},"sourceType":"module"}
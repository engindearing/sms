{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as AppleAuthentication from 'expo-apple-authentication';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function LoginScreen() {\n  return _jsx(AppleAuthentication.AppleAuthenticationButton, {\n    buttonType: AppleAuthentication.AppleAuthenticationButtonType.SIGN_IN,\n    buttonStyle: AppleAuthentication.AppleAuthenticationButtonStyle.BLACK,\n    cornerRadius: 5,\n    style: {\n      width: 200,\n      height: 44\n    },\n    onPress: function _callee() {\n      var credential;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(AppleAuthentication.signInAsync({\n                requestedScopes: [AppleAuthentication.AppleAuthenticationScope.FULL_NAME, AppleAuthentication.AppleAuthenticationScope.EMAIL]\n              }));\n\n            case 3:\n              credential = _context.sent;\n              _context.next = 9;\n              break;\n\n            case 6:\n              _context.prev = 6;\n              _context.t0 = _context[\"catch\"](0);\n\n              if (_context.t0.code === 'ERR_CANCELED') {} else {}\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 6]], Promise);\n    }\n  });\n}","map":{"version":3,"sources":["/home/isaiah/dev/sms/services/client/screens/LoginScreen/LoginScreen.tsx"],"names":["AppleAuthentication","LoginScreen","AppleAuthenticationButtonType","SIGN_IN","AppleAuthenticationButtonStyle","BLACK","width","height","signInAsync","requestedScopes","AppleAuthenticationScope","FULL_NAME","EMAIL","credential","code"],"mappings":";AAAA,OAAO,KAAKA,mBAAZ,MAAqC,2BAArC;;AAEA,OAAO,SAASC,WAAT,GAAuB;AAC5B,SACE,KAAC,mBAAD,CAAqB,yBAArB;AACE,IAAA,UAAU,EAAED,mBAAmB,CAACE,6BAApB,CAAkDC,OADhE;AAEE,IAAA,WAAW,EAAEH,mBAAmB,CAACI,8BAApB,CAAmDC,KAFlE;AAGE,IAAA,YAAY,EAAE,CAHhB;AAIE,IAAA,KAAK,EAAE;AAAEC,MAAAA,KAAK,EAAE,GAAT;AAAcC,MAAAA,MAAM,EAAE;AAAtB,KAJT;AAKE,IAAA,OAAO,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAEoBP,mBAAmB,CAACQ,WAApB,CAAgC;AACvDC,gBAAAA,eAAe,EAAE,CACfT,mBAAmB,CAACU,wBAApB,CAA6CC,SAD9B,EAEfX,mBAAmB,CAACU,wBAApB,CAA6CE,KAF9B;AADsC,eAAhC,CAFpB;;AAAA;AAECC,cAAAA,UAFD;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAUL,kBAAI,YAAEC,IAAF,KAAW,cAAf,EAA+B,CAE9B,CAFD,MAEO,CAEN;;AAdI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AALX,IADF;AAyBD","sourcesContent":["import * as AppleAuthentication from 'expo-apple-authentication';\n\nexport function LoginScreen() {\n  return (\n    <AppleAuthentication.AppleAuthenticationButton\n      buttonType={AppleAuthentication.AppleAuthenticationButtonType.SIGN_IN}\n      buttonStyle={AppleAuthentication.AppleAuthenticationButtonStyle.BLACK}\n      cornerRadius={5}\n      style={{ width: 200, height: 44 }}\n      onPress={async () => {\n        try {\n          const credential = await AppleAuthentication.signInAsync({\n            requestedScopes: [\n              AppleAuthentication.AppleAuthenticationScope.FULL_NAME,\n              AppleAuthentication.AppleAuthenticationScope.EMAIL,\n            ],\n          });\n          // signed in\n        } catch (e) {\n          if (e.code === 'ERR_CANCELED') {\n            // handle that the user canceled the sign-in flow\n          } else {\n            // handle other errors\n          }\n        }\n      }}\n    />\n  );\n}\n\n\n\n// import { AppleAuthenticationButton, AppleAuthenticationButtonType, AppleAuthenticationButtonStyle } from 'expo-apple-authentication';\n// import React from 'react';\n// import { Text, View } from 'react-native';\n// import useAppleAuthentication from '../../hooks/auth/useAppleAuthentication';\n\n// import EStyleSheet from 'react-native-extended-stylesheet';\n\n// export default function Login() {\n//   const [appleAuthAvailable, authWithApple] = useAppleAuthentication();\n\n//   async function loginWithApple() {\n//     try {\n//       const [credential, data] = await authWithApple();\n//       console.log(credential)\n//       console.log(data)\n//       // await login(credential, data);\n//     } catch (error: any) {\n//       console.error(error);\n//       alert('Error Something went wrong. Please try again later.');\n//     }\n//   }\n\n\n//   return (\n//     <View>\n//       <Text style={styles.hello}>Login</Text>\n//       {appleAuthAvailable && (\n//         <AppleAuthenticationButton\n//           buttonType={AppleAuthenticationButtonType.SIGN_IN}\n//           buttonStyle={AppleAuthenticationButtonStyle.BLACK}\n//           cornerRadius={5}\n//           style={{\n//             width: '100%',\n//             height: 48,\n//             marginTop: 16\n//           }}\n//           onPress={loginWithApple}\n//         />\n//       )\n//       }\n//     </View>\n//   )\n// }\n\n// const styles = EStyleSheet.create({\n//   hello: {\n//     color: 'red'\n//   },\n\n//   '@media (max-width: 1500px)': {\n//     hello: {\n//       color: 'purple'\n//     },\n//   }\n// })"]},"metadata":{},"sourceType":"module"}
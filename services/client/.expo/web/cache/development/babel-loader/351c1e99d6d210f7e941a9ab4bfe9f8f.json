{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport 'react-native-gesture-handler';\nimport React, { useEffect } from \"react\";\nimport { Provider, useDispatch, useSelector } from \"react-redux\";\nimport { store } from \"./state/store\";\nimport { NavigationContainer, useNavigation } from \"@react-navigation/native\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport { HomeScreen, LoginScreen, RegisterScreen } from \"./screens\";\nimport Theme from \"./Theme\";\nimport { Button, NativeBaseProvider } from \"native-base\";\nimport { auth } from \"./firebase\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { signOut } from \"./state/users/userActions\";\nimport SheltersScreen from \"./screens/SheltersScreen/SheltersScreen\";\nimport ShelterDashboardScreen from \"./screens/ShelterDashboardScreen/ShelterDashboardScreen\";\nimport ReservationScreen from \"./screens/ReservationScreen/ReservationScreen\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function App() {\n  return _jsx(Provider, {\n    store: store,\n    children: _jsx(NavigationContainer, {\n      children: _jsx(NativeBaseProvider, {\n        children: _jsx(Theme, {\n          children: _jsx(SMS, {})\n        })\n      })\n    })\n  });\n}\n\nfunction SMS() {\n  var navigation = useNavigation();\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      isLoggedIn = _useSelector.isLoggedIn;\n\n  var dispatch = useDispatch();\n  useEffect(function () {\n    var unsubscribe = auth.onAuthStateChanged(function _callee(user) {\n      var _await$user$getIdToke, token;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (user) {\n                _context.next = 5;\n                break;\n              }\n\n              navigation.reset({\n                index: 0,\n                routes: [{\n                  name: \"Login\"\n                }]\n              });\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(AsyncStorage.removeItem(\"accessToken\"));\n\n            case 4:\n              dispatch(signOut());\n\n            case 5:\n              if (!user) {\n                _context.next = 13;\n                break;\n              }\n\n              _context.next = 8;\n              return _regeneratorRuntime.awrap(user.getIdTokenResult());\n\n            case 8:\n              _await$user$getIdToke = _context.sent;\n              token = _await$user$getIdToke.token;\n              _context.next = 12;\n              return _regeneratorRuntime.awrap(AsyncStorage.setItem(\"accessToken\", token));\n\n            case 12:\n              navigation.reset({\n                index: 0,\n                routes: [{\n                  name: \"Home\"\n                }]\n              });\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    });\n    return unsubscribe;\n  }, []);\n  var Stack = createNativeStackNavigator();\n  return _jsxs(Stack.Navigator, {\n    screenOptions: {\n      headerStyle: {\n        backgroundColor: '#8D4982'\n      },\n      headerTintColor: '#fff',\n      headerTitleStyle: {\n        fontWeight: 'bold'\n      },\n      headerRight: function headerRight() {\n        return isLoggedIn && _jsx(Button, {\n          onPress: function onPress() {\n            return auth.signOut();\n          },\n          children: \"Logout\"\n        });\n      }\n    },\n    children: [_jsx(Stack.Screen, {\n      name: \"shelters\",\n      component: SheltersScreen\n    }), _jsx(Stack.Screen, {\n      name: \"Reservation\",\n      component: ReservationScreen\n    }), _jsx(Stack.Screen, {\n      name: \"shelterdashboard\",\n      component: ShelterDashboardScreen\n    }), _jsx(Stack.Screen, {\n      name: \"Login\",\n      component: LoginScreen\n    }), _jsx(Stack.Screen, {\n      name: \"Register\",\n      component: RegisterScreen\n    }), _jsx(Stack.Screen, {\n      name: \"Home\",\n      component: HomeScreen\n    })]\n  });\n}","map":{"version":3,"sources":["/home/isaiah/dev/sms/services/client/App.tsx"],"names":["React","useEffect","Provider","useDispatch","useSelector","store","NavigationContainer","useNavigation","createNativeStackNavigator","HomeScreen","LoginScreen","RegisterScreen","Theme","Button","NativeBaseProvider","auth","AsyncStorage","signOut","SheltersScreen","ShelterDashboardScreen","ReservationScreen","App","SMS","navigation","state","user","isLoggedIn","dispatch","unsubscribe","onAuthStateChanged","reset","index","routes","name","removeItem","getIdTokenResult","token","setItem","Stack","headerStyle","backgroundColor","headerTintColor","headerTitleStyle","fontWeight","headerRight"],"mappings":"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","sourcesContent":["import 'react-native-gesture-handler'\n\nimport React, { useEffect } from \"react\";\n\nimport { Provider, useDispatch, useSelector } from \"react-redux\";\nimport { store } from \"./state/store\";\n\nimport { NavigationContainer, useNavigation } from \"@react-navigation/native\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\n\nimport { HomeScreen, LoginScreen, RegisterScreen } from \"./screens\";\n\nimport EStyleSheet from \"react-native-extended-stylesheet\";\nimport Theme from \"./Theme\";\nimport { Button, NativeBaseProvider } from \"native-base\";\nimport { auth } from \"./firebase\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { signOut } from \"./state/users/userActions\";\n\nimport { Text } from 'react-native'\n\nimport SheltersScreen from './screens/SheltersScreen/SheltersScreen';\nimport ShelterDashboardScreen from './screens/ShelterDashboardScreen/ShelterDashboardScreen';\nimport ReservationScreen from './screens/ReservationScreen/ReservationScreen';\n\n\nexport type RootStackParamList = {\n  Home: undefined;\n  Login: undefined;\n  Register: undefined;\n  Intake: undefined,\n  shelters: undefined,\n  shelterdashboard: undefined,\n  Reservation: undefined\n};\n\ndeclare global {\n  namespace ReactNavigation {\n    interface RootParamList extends RootStackParamList {}\n  }\n}\n\nexport default function App() {\n  return (\n    <Provider store={store}>\n      <NavigationContainer>\n        <NativeBaseProvider>\n          <Theme>\n            <SMS />\n          </Theme>\n        </NativeBaseProvider>\n      </NavigationContainer>\n    </Provider>\n  );\n}\n\nfunction SMS() {\n  let navigation = useNavigation();\n  \n  let { isLoggedIn } = useSelector((state:any) => state.user)\n\n  let dispatch = useDispatch()\n\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged(\n      async (user) => {\n        if (!user) {\n          navigation.reset({\n            index: 0,\n            routes: [{ name: \"Login\" }],\n          });\n          \n          await AsyncStorage.removeItem(\"accessToken\");\n\n          dispatch(signOut())\n        }\n\n        if (user) {\n          let { token } = await user.getIdTokenResult();\n\n          await AsyncStorage.setItem(\"accessToken\", token);\n\n          navigation.reset({\n            index: 0,\n            routes: [{ name: \"Home\" }],\n          });\n        }\n      }\n    );\n\n    return unsubscribe;\n  }, []);\n\n  const Stack = createNativeStackNavigator<RootStackParamList>();\n\n\n  return (\n    <Stack.Navigator \n    screenOptions={{\n      headerStyle: {\n        backgroundColor: '#8D4982',\n      },\n      headerTintColor: '#fff',\n      headerTitleStyle: {\n        fontWeight: 'bold',\n      },\n\n      headerRight: () => {\n       return isLoggedIn && <Button onPress={() => auth.signOut()}>Logout</Button>\n      } \n    }}\n    >\n      <Stack.Screen name=\"shelters\" component={SheltersScreen} />\n      <Stack.Screen name=\"Reservation\" component={ReservationScreen} />\n\n      <Stack.Screen name=\"shelterdashboard\" component={ShelterDashboardScreen} />\n\n      <Stack.Screen name=\"Login\" component={LoginScreen} />\n      <Stack.Screen name=\"Register\" component={RegisterScreen} />\n      <Stack.Screen name=\"Home\" component={HomeScreen} />\n\n    </Stack.Navigator>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}